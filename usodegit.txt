comandos más importantes

git init: creación de un repositorio local (staging area: área de preparación, 
        preparando los cambio para que sean reales, meter todo lo que sea un cambio (hsitorial de cambios))

primer cambio --> creación (aunque ya exita pero se crea por primera vez en git, es neuno en git) se usa git add
git add: creación del primer archivo en git hub, o la modificación de éste, lo agrega al área de preparación (staging area)

git commit: confirmar los cambios que se estan haciendo --> generación del historial de cambios
ya esta en un repositorio local ---> llevarlo a un repositorio remoto git push
                git commit -m

git status: estado actual del repositorio
       U al lado de los nombres de los archivos significa untracked documentos desconocidos (no están en el repositorio de git, no es rastreado)
       A al lado de los nombres de los archivos significa añadido
       M al lado de los nombres de los archivos significa modificado


git add <archivo>: en archivo coloco el archivo que quiero agregar al repositorio de git

git add .: agrega todos los archivos al repositorio local 
        (ejemplos  git *.txt) el asteristo es una expresión regular
        (suplanta cualquier texto, es como un comodin, significa cualquier cosa)
git add . = git add *.*

git rm -- cached <file> hace que el documento (archivo) no sea rastrado o reconocido por git ( no se pueden camibiar
de status (A,U,) si el archivo esta siendo modificado)

si no hay cambios al usar git commit, git te obliga a cambiar el documento (con los botones INSERTAR y ESCAPE ) 
        :wq comando para cerrar el editor

identificar al creador/a
git config --global user.email "you@example.com"-- identificar correo
git config --global user.name "Your Name" -- identificar el nombre del creador

git log : historial de cambios

creador de nuevas ramas y mezcla


git stach: recuperar/guardar cambios realizados en el código y retomar la última versión o commit almacenado

git fetch: actualiza los commits, archivos y referencias de un repositorio remoto a tu repositorio local
        git pull: los trae a tu repositorio

git checkout - b "nombre de la rama"- crea una nueva rama y te mueves a ella
git branch : crea una nueva rama  con git checkout () te mueves hacia ella

orden

creas algo -> lo agregas al repositorio local (git add.) luego haces un git commit -m (nombre)
(si son ramas las puedes mezclar con git merge)y luego lo empujas al repositorio con git push (con git status monitoreas tu estado actual)

cd .. retroceder carpetas
cd nombre carpeta 